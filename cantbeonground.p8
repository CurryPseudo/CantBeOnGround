pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--die
originpos = {}
originpos.x = 1.4
originpos.y = 12.4
--player
groundheight = 3
player = {}
player.x = originpos.x
player.y = originpos.y
player.vx = 0
player.vy = 0
player.width = 0.6
player.height = 1.0
player.dir = {}
player.dir.x = 1
player.dir.y = 0
player.bdir = {}
player.bdir.x = 0
player.bdir.y = 0
player.spr = 1
gravity = 0.004
fx = 0.0005

--power
powertime = 0.6
powertimecount = 0  
couldpower = true
powera = 0.005
powerangle = 1/14
powering = false

poweringView = {}
poweringView.value = 1
poweringView.length = 12
poweringView.height = 0.5
poweringView.color = 9
poweringView.y = 14

--jump
jumpflag = false
jumpspeed = 0.12
--map
maps = {}
maps[1] = {}
maps[1].x = 0
maps[1].y = 0
maps[1].w = 16
maps[1].h = 16
currentmap = 1
--camera
camera = {}
camera.w = 12
camera.h = 12
camera.x = 8
camera.y = 8
function loadmapi(i)
    loadmap(maps[i])
end
function loadmap(m)
    cameraprocess(m)
    rpos = posmapping({x = 0,y = 0})
    map(m.x, m.y, rpos.x, rpos.y, m.x + m.w, m.y + m.h)

end
function doxy(f, pos)
    rpos = pos
    rpos.x = f(pos.x)
    rpos.y = f(pos.y)
    return rpos
end
function cameraprocess(m)
    if(abs(camera.x - player.x) > camera.w / 2) then
        camera.x = player.x + sign(camera.x - player.x) * camera.w / 2
    end
    if(abs(camera.y - player.y) > camera.h / 2) then
        camera.y = player.y + sign(camera.y - player.y) * camera.h / 2
    end

    posmapping = function(pos)
                    rpos = pos
                    rpos.x = 8 + pos.x - camera.x
                    rpos.y = 8 + pos.y - camera.y
                    return rpos
    end
end
function _draw() 
    cls(0)
    loadmapi(currentmap)
    plpos = posmapping(player)
    spr(player.spr, plpos.x * 8 - 4, plpos.y * 8 - 4)
    drawpoweringview(poweringView)
    print(camera.x)
    print(camera.y)
end
function celToPixel(v)
    return v * 8
end
function unpack(table, from, to)
    from = from or 1
    to = to or #table
    if(from > to) then
        return nil
    end
    return table[from], unpack(table, from + 1, to)
end
function fnf(f1, n, f2, ...)
    local args = {...}
    local k = 0
    for i,v in pairs(args) do
        if(k < n) then
            args[i] = f2(args[i])
            k += 1
        else
            break
        end
    end
    return f1(unpack(args))
end

function drawpoweringview(v)
    poweringView.value = powertimecount / powertime
    fnf(rectfill, 4, celToPixel, 8 - v.length * v.value / 2, v.y - v.height / 2, 8 + v.length * v.value / 2, v.y + v.height / 2, 10)
end
function toradian(degree)
    return degree / 180 * 3.14159
end
function _update60()
    inputupdate()
    powerupdate()
    playerupdate()
    viewupdate()
    
end
function viewupdate()
    if(player.bdir.x == 0 and player.bdir.y == 1 and ifpowering())
    then
        player.spr = 1
    else
        player.spr = 3 - player.dir.x
        if(ifpowering()) then
            player.spr += 1
        end
    end
end
function powerbutton()
    return btn(0) or btn(1) or btn(2)
end
function powerupdate()
    if(powertimecount > 0 and powerbutton())
    then
        powering = true
        powertimecount -= 1 / 60
        powerup(player.bdir)
    else
        powering = false
    end
end
function ifpowering()
    return powering
end
function powerup(dir)
    player.vx += dir.x * powera * cos(powerangle)
    player.vy += dir.y * powera * sin(powerangle)
end
function inputupdate()
    player.bdir.x = 0
    if(btn(0))
    then
        player.dir.x = -1
        player.bdir.x -= 1
    end
    if(btn(1))
    then
        player.dir.x = 1
        player.bdir.x += 1
    end
    if(btn(2))
    then
        player.bdir.y = 1
    else
        player.bdir.y = 0
    end
end
function playerupdate()
    player.vy += gravity
    player.vx += fx * sign(player.vx) * -1
    if(abs(player.vx) <= fx)
    then
        player.vx = 0
    end
    if(abs(player.vy) <= fx)
    then
        player.vy = 0
    end
    stepbyv()
    if(dieingcheck())
    then
        resetpos()
    end
end
function resetpos()
   player.x = originpos.x 
   player.y = originpos.y
   player.vx = 0
   player.vy = 0
end
function dieingcheck()
    return player.y > 16.5
end
function rightedge()
    return player.x + player.width / 2
end
function leftedge()
    return player.x - player.width / 2
end
function upedge()
    return player.y - player.height / 2
end
function downedge()
    return player.y + player.height / 2
end
function stepbyv()
    lx = player.x
    ly = player.y
    player.x = player.x + player.vx
    if(solidbothy(sign(player.vx), 0))
    then
        player.x = lx
        player.vx = -player.vx * 0.25
    end
    player.y = player.y + player.vy
    if(solidbothx(sign(player.vy), 0))
    then
        player.y = ly
        if(player.vy > 0)
        then
            touchgroundandjump()
        else
            player.vy = 0
        end
    end
    r1,r2 = soliddeltabothx(1,0.1,2)
    if(r1 and not r2 and player.vy > 0)
    then
        touchgroundandjump()
    end
end
function touchgroundandjump()
    player.vy = -jumpspeed
    powertimecount = powertime
end
function onground()
    return (not fget(mget(player.x, downedge()), 0)) and fget(mget(player.x, downedge() + 0.2), 0)
end
function solid(xsign, ysign, flag)
    return soliddelta(xsign,0,ysign,0,flag)
end
function fmget(x,y,flag)
    return fget(mget(x,y),flag)
end
function solidbothx(ysign, flag)
    return solid(1,ysign,flag) or solid(-1,ysign,flag)
end
function solidbothy(xsign, flag)
    return solid(xsign,1,flag) or solid(xsign,-1,flag)
end
function soliddelta(xsign, deltax, ysign, deltay, flag)
    return fmget(player.x + player.width / 2 * xsign + xsign * deltax, player.y + player.height / 2 * ysign + ysign * deltay, flag) , fmget(player.x + player.width / 2 * xsign - xsign * deltax, player.y + player.height / 2 * ysign - ysign * deltay, flag)
end
function soliddeltabothy(xsign, deltax, flag)
    r1,r2 = soliddelta(xsign,deltax,-1,0,flag)
    r3,r4 = soliddelta(xsign,deltax,1,0,flag)
    return r1 or r3 , r2 or r4
end
function soliddeltabothx(ysign, deltay, flag)
    r1,r2 = soliddelta(-1,0,ysign,deltay,flag)
    r3,r4 = soliddelta(1,0,ysign,deltay,flag)
    return r1 or r3 , r2 or r4
end
function downfeetplatform(delta)
    return fget(mget(player.x + player.width / 2, player.y + player.height / 2 - delta ))
end
function sign(num)
    if(num > 0)
    then
        return 1
    elseif(num < 0)
    then
        return -1
    else
        return 0
    end
end

__gfx__
00000000000770000000770000007700007700000077000044944444676767670000000000000000000000000000000000000000000000000000000000000000
00000000006116000007617000076170071670000716700044444494767676760000000000000000000000000000000000000000000000000000000000000000
00000000096156900007617000076170075670000756700049444449000000000000000000000000000000000000000000000000000000000000000000000000
000000000876678000257700a825770000775e0000775e8a44944944000000000000000000000000000000000000000000000000000000000000000000000000
0000000006d77d6000e57d00a9e57d0000d7520000d7529a44444494000000000000000000000000000000000000000000000000000000000000000000000000
0000000006d66d6000e57d00a9e57d0000d7520000d7529a94444944000000000000000000000000000000000000000000000000000000000000000000000000
000000000a6776a00000660000006600006600000066000044944494000000000000000000000000000000000000000000000000000000000000000000000000
00000000006006000000660000006600006600000066000094444444000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000e5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000e5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0002020202020104000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0608080808080808080808080808080600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000606060606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0607070000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000707000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000800000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000707000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000000000707000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0600000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060000060606000000000606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060000060606000000000606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060000060606000000000606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
